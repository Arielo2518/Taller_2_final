"tidyverse",  # Para manipulación de datos
"readxl",     # Para leer archivos Excel
"sf",         # Para datos geográficos
"here",       # Para manejo de rutas
"DiagrammeR", # Para diagramas ER
"usethis"     # Para configuración de Git
)
# Instalar paquetes faltantes
new_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
# Cargar paquetes
lapply(packages, library, character.only = TRUE)
# Configurar Git
usethis::use_git()
'
writeLines(load_data_content, file.path("R", "01_load_data.R"))
# Crear .gitignore - Este archivo evita que se suban archivos innecesarios a GitHub
gitignore_content <- ".Rproj.user
.Rhistory
.RData
.Ruserdata
*.Rproj"
writeLines(gitignore_content, ".gitignore")
metropolitana_2021_1 <- import("https://github.com/Arielo2518/Taller_2_final/raw/main/data/Servel/metropolitana_2021_primeravuelta.xlsx")
datos_comunas1_2021 <- metropolitana_2021_1 %>%
select(Distrito, Comuna, Local, Mesa, Inscritos, Votación) %>%
group_by(Distrito, Comuna)
datos_comunas1_2021_agrupado <- metropolitana_2021_1 %>%
select(Distrito, Comuna, Local, Mesa, Inscritos, Votación) %>%
group_by(Distrito, Comuna) %>%
summarize(
Total_Inscritos = sum(as.numeric(Inscritos), na.rm = TRUE),
Total_Votacion = sum(as.numeric(Votación), na.rm = TRUE)
) %>%
mutate(Participacion_Porcentaje = (Total_Votacion / Total_Inscritos) * 100)
eleccion_2021_primeravuelta <- datos_comunas1_2021_agrupado %>%
rename(comuna = Comuna) %>%
mutate(comuna = str_to_lower(comuna))
eleccion_2021_primeravuelta
metropolitana_2021_2 <- import("https://github.com/Arielo2518/Taller_2_final/raw/main/data/Servel/metropolitana_2021_segundavuelta.xlsx")
datos_comunas2_2021 <- metropolitana_2021_2 %>%
select(Distrito, Comuna, Local, Mesa, Inscritos, Votación) %>%
group_by(Distrito, Comuna)
datos_comunas2_2021_agrupado <- metropolitana_2021_2 %>%
select(Distrito, Comuna, Local, Mesa, Inscritos, Votación) %>%
group_by(Distrito, Comuna) %>%
summarize(
Total_Inscritos = sum(as.numeric(Inscritos), na.rm = TRUE),
Total_Votacion = sum(as.numeric(Votación), na.rm = TRUE)
) %>%
mutate(Participacion_Porcentaje = (Total_Votacion / Total_Inscritos) * 100)
eleccion_2021_segundavuelta <- datos_comunas2_2021_agrupado %>%
rename(comuna = Comuna) %>%
mutate(comuna = str_to_lower(comuna))
eleccion_2021_segundavuelta
remove(datos_comunas1_2021, datos_comunas2_2021, datos_comunas1_2021_agrupado, datos_comunas2_2021_agrupado, metropolitana_2021_1, metropolitana_2021_2, datos_comunas1_2021, datos_comunas2_2021)
eleccion_2021_primeravuelta <- eleccion_2021_primeravuelta %>%
mutate(Participacion_Porcentaje = as.numeric(Participacion_Porcentaje))
participacion_comuna <- eleccion_2021_primeravuelta %>%
filter(!is.na(Participacion_Porcentaje) & Participacion_Porcentaje >= 0) %>%
group_by(comuna) %>%
summarise(participacion_comuna = sum(Participacion_Porcentaje, na.rm = TRUE))
comunas_santiago <- mapa_comunas %>%
filter(codigo_region == 13) %>%
left_join(
codigos_territoriales %>%
select(matches("comuna"))
) %>%
mutate(nombre_comuna = str_trim(tolower(nombre_comuna))) %>%  # Convertir a minúsculas y quitar espacios
left_join(participacion_comuna %>%
mutate(comuna = str_trim(tolower(comuna))), by = c("nombre_comuna" = "comuna"))
paleta <- c("#DCA761", "#CFB567", "#BFBC71", "#9EA887", "#819897")
Gráfico_1 <- ggplot(comunas_santiago) +
geom_sf(aes(fill = participacion_comuna, geometry = geometry)) +
scale_fill_gradientn(colours = rev(paleta), name = "Porcentaje participación") +
labs(title = "Participación Electoral en 1era Vuelta 2021") +
theme_minimal(base_size = 13)
Gráfico_1
eleccion_2021_segundavuelta <- eleccion_2021_segundavuelta %>%
mutate(Participacion_Porcentaje = as.numeric(Participacion_Porcentaje))
participacion_comuna <- eleccion_2021_segundavuelta %>%
filter(!is.na(Participacion_Porcentaje) & Participacion_Porcentaje >= 0) %>%
group_by(comuna) %>%
summarise(participacion_comuna = sum(Participacion_Porcentaje, na.rm = TRUE))
comunas_santiago <- mapa_comunas %>%
filter(codigo_region == 13) %>%
left_join(
codigos_territoriales %>%
select(matches("comuna"))
) %>%
mutate(nombre_comuna = str_trim(tolower(nombre_comuna))) %>%  # Convertir a minúsculas y quitar espacios
left_join(participacion_comuna %>%
mutate(comuna = str_trim(tolower(comuna))), by = c("nombre_comuna" = "comuna"))
paleta <- c("#DCA761", "#CFB567", "#BFBC71", "#9EA887", "#819897")
Gráfico_2 <- ggplot(comunas_santiago) +
geom_sf(aes(fill = participacion_comuna, geometry = geometry)) +
scale_fill_gradientn(colours = rev(paleta), name = "Porcentaje participación") +
labs(title = "Participación Electoral en 2da Vuelta 2021") +
theme_minimal(base_size = 13)
Gráfico_2
# Gráfico 2021
Gráfico_3 <- plot_grid(
participacion_2021_primeravuelta + theme(legend.position = "none"),
participacion_2021_segundavuelta + theme(legend.position = "none"),
align = "v",
ncol = 2
)
# Gráfico 2021
Gráfico_3 <- plot_grid(
participacion_2021_primeravuelta + theme(legend.position = "none"),
participacion_2021_segundavuelta + theme(legend.position = "none"),
align = "v",
ncol = 2
)
# Gráfico 2021
Gráfico_3 <- plot_grid(
eleccion_2021_primeravuelta + theme(legend.position = "none"),
eleccion_2021_segundavuelta + theme(legend.position = "none"),
align = "v",
ncol = 2
)
Gráfico_3 <- plot_grid(
eleccion_2021_primeravuelta + theme(legend.position = "none"),
eleccion_2021_segundavuelta + theme(legend.position = "none"),
align = "v",
ncol = 2
)
# Gráfico 2021
Gráfico_3 <- plot_grid(
Gráfico_1 + theme(legend.position = "none"),
Gráfico_2 + theme(legend.position = "none"),
align = "v",
ncol = 2
)
# Extraer la leyenda de uno de los gráficos
leyenda <- get_legend(Gráfico_1)
# Combinar gráficos y leyenda
plot_grid(Gráfico_3, leyenda, ncol = 1, rel_heights = c(0.81, 0.5))
View(comunas_santiago)
comuna_codes_rm <- c(
"13101" = "SANTIAGO",
"13102" = "CERRILLOS",
"13103" = "CERRO NAVIA",
"13104" = "CONCHALI",
"13105" = "EL BOSQUE",
"13106" = "ESTACION CENTRAL",
"13107" = "HUECHURABA",
"13108" = "INDEPENDENCIA",
"13109" = "LA CISTERNA",
"13110" = "LA FLORIDA",
"13111" = "LA GRANJA",
"13112" = "LA PINTANA",
"13113" = "LA REINA",
"13114" = "LAS CONDES",
"13115" = "LO BARNECHEA",
"13116" = "LO ESPEJO",
"13117" = "LO PRADO",
"13118" = "MACUL",
"13119" = "MAIPU",
"13120" = "NUNOA",
"13121" = "PEDRO AGUIRRE CERDA",
"13122" = "PENALOLEN",
"13123" = "PROVIDENCIA",
"13124" = "PUDAHUEL",
"13125" = "QUILICURA",
"13126" = "QUINTA NORMAL",
"13127" = "RECOLETA",
"13128" = "RENCA",
"13129" = "SAN JOAQUIN",
"13130" = "SAN MIGUEL",
"13131" = "SAN RAMON",
"13132" = "VITACURA",
"13201" = "PUENTE ALTO",
"13202" = "PIRQUE",
"13203" = "SAN JOSE DE MAIPO",
"13301" = "COLINA",
"13302" = "LAMPA",
"13303" = "TILTIL",
"13401" = "SAN BERNARDO",
"13402" = "BUIN",
"13403" = "CALERA DE TANGO",
"13404" = "PAINE",
"13501" = "MELIPILLA",
"13502" = "ALHUE",
"13503" = "CURACAVI",
"13504" = "MARIA PINTO",
"13505" = "SAN PEDRO",
"13601" = "TALAGANTE",
"13602" = "EL MONTE",
"13603" = "ISLA DE MAIPO",
"13604" = "PADRE HURTADO",
"13605" = "PENAFLOR"
)
comuna_codes_rm <- tibble::tibble(
comuna = names(comuna_codes_rm),  # Extracción de los códigos de CASEN
nombre_comuna = unname(comuna_codes_rm)  # Nombres
)
comuna_codes_rm <- comuna_codes_rm %>%
mutate(nombre_comuna = str_to_lower(nombre_comuna))
casen_2021_rm <- import("https://github.com/Arielo2518/Taller_2_final/raw/main/data/CASEN/casen_2021_rm.xlsx")
casen_comunas_2021 <- import("https://github.com/Arielo2518/Taller_2_final/raw/main/data/CASEN/casen_comunas_2021.xlsx")
casen_2021_rm_actualizada <- casen_2021_rm %>%
left_join(casen_comunas_2021, by = c("folio", "id_persona")) %>% #Las bases se unieron mediante folio e id persona
group_by(folio) %>%
mutate_all(~ifelse(. %in% c(-88, -99, 97,98,99), NA, .)) # Eliminamos valores faltantes
casen_2021_rm_actualizada
casen_2021_rm_actualizada <- casen_2021_rm_actualizada %>%
mutate(comuna = as.character(comuna))
casen_2021 <- casen_2021_rm_actualizada %>%
left_join(comuna_codes_rm, by = "comuna") %>%
mutate(comuna = nombre_comuna) %>%
select(-nombre_comuna)
remove(casen_2021_rm, casen_comunas_2021, comuna_codes_rm, casen_2021_rm_actualizada)
promedio_dau_comuna <- casen_2021 %>%
group_by(comuna) %>%                    # Agrupar por comuna
summarise(promedio_dau = mean(dau, na.rm = TRUE))  # Calcular promedio de 'dau' ignorando NA
# Ver el resultado
promedio_dau_comuna
# Reemplazamos Ñ por n para cruce con CASEN
eleccion_2021_primeravuelta <- eleccion_2021_primeravuelta %>%
mutate(across(everything(), ~str_replace_all(., "ñ", "n")))
eleccion_2021_segundavuelta <- eleccion_2021_segundavuelta %>%
mutate(across(everything(), ~str_replace_all(., "ñ", "n")))
# Realizar el cruce de bases por 'comuna'
datos_cruzados_primeravuelta <- eleccion_2021_primeravuelta %>%
left_join(promedio_dau_comuna, by = "comuna")
datos_cruzados_segundavuelta <- eleccion_2021_segundavuelta %>%
left_join(promedio_dau_comuna, by = "comuna")
datos_cruzados_primeravuelta
datos_cruzados_segundavuelta
#  Transformamos promedio dau a númericoa
datos_cruzados_primeravuelta <- datos_cruzados_primeravuelta %>%
mutate(promedio_dau = as.numeric(promedio_dau))
# Filtrar y calcular el promedio de 'promedio_dau' por comuna
promedio_dau_comuna <- datos_cruzados_primeravuelta %>%
filter(!is.na(promedio_dau) & promedio_dau >= 0) %>%
group_by(comuna) %>%
summarise(promedio_dau_comuna = mean(promedio_dau, na.rm = TRUE))  # Cambié la suma por el promedio
# Mapa desde el paquete Chile Mapas
comunas_santiago <- mapa_comunas %>%
filter(codigo_region == 13) %>%
left_join(
codigos_territoriales %>%
select(matches("comuna"))
) %>%
mutate(nombre_comuna = str_trim(tolower(nombre_comuna))) %>%  # Convertir a minúsculas y quitar espacios
left_join(promedio_dau_comuna %>%
mutate(comuna = str_trim(tolower(comuna))), by = c("nombre_comuna" = "comuna"))  # Unir el promedio por comuna
paleta <- c("#DCA761", "#CFB567", "#BFBC71", "#9EA887", "#819897")
# Gráfico 4
Gráfico_4 <- ggplot(comunas_santiago) +
geom_sf(aes(fill = promedio_dau_comuna, geometry = geometry)) +
scale_fill_gradientn(colours = rev(paleta), name = "Promedio Decil por comuna") +  # Usar el promedio de DAU
labs(title = "Promedio DAU por Comuna en 2021") +
theme_minimal(base_size = 13) +
theme(
axis.title = element_blank(),  # Quitar los títulos de los ejes
axis.text = element_blank(),   # Quitar las marcas de los ejes
axis.ticks = element_blank(),  # Quitar las líneas de los ejes
plot.title = element_text(hjust = 0.5)  # Centrar el título
)
Gráfico_4
# Transformamos promedio dau a númerico
datos_cruzados_segundavuelta <- datos_cruzados_segundavuelta %>%
mutate(promedio_dau = as.numeric(promedio_dau))
# Filtrar y calcular el promedio de 'promedio_dau' por comuna
promedio_dau_comuna <- datos_cruzados_segundavuelta %>%
filter(!is.na(promedio_dau) & promedio_dau >= 0) %>%
group_by(comuna) %>%
summarise(promedio_dau_comuna = mean(promedio_dau, na.rm = TRUE))  # Cambié la suma por el promedio
# Mapa desde el paquete Chile Mapas
comunas_santiago <- mapa_comunas %>%
filter(codigo_region == 13) %>%
left_join(
codigos_territoriales %>%
select(matches("comuna"))
) %>%
mutate(nombre_comuna = str_trim(tolower(nombre_comuna))) %>%  # Convertir a minúsculas y quitar espacios
left_join(promedio_dau_comuna %>%
mutate(comuna = str_trim(tolower(comuna))), by = c("nombre_comuna" = "comuna"))  # Unir el promedio por comuna
paleta <- c("#DCA761", "#CFB567", "#BFBC71", "#9EA887", "#819897")
# Gráfico 4
Gráfico_5 <- ggplot(comunas_santiago) +
geom_sf(aes(fill = promedio_dau_comuna, geometry = geometry)) +
scale_fill_gradientn(colours = rev(paleta), name = "Promedio Decil por comuna") +  # Usar el promedio de DAU
labs(title = "Promedio DAU por Comuna en 2021") +
theme_minimal(base_size = 13) +
theme(
axis.title = element_blank(),  # Quitar los títulos de los ejes
axis.text = element_blank(),   # Quitar las marcas de los ejes
axis.ticks = element_blank(),  # Quitar las líneas de los ejes
plot.title = element_text(hjust = 0.5)  # Centrar el título
)
Gráfico_5
# Gráfico 2021
Gráfico_6 <- plot_grid(
Gráfico_4 + theme(legend.position = "none"),
Gráfico_5 + theme(legend.position = "none"),
align = "v",
ncol = 2
)
# Extraer la leyenda de uno de los gráficos
leyenda <- get_legend(Gráfico_4)
# Combinar gráficos y leyenda
plot_grid(Gráfico_6, leyenda, ncol = 1, rel_heights = c(0.81, 0.5))
# Creamos una clasificación simplificada de nivel educacional
casen_2021 <- casen_2021_rm_actualizada %>%
mutate(nivel_educacional = case_when(
# Sin educación formal o básica incompleta
e6a %in% c(1, 2, 3, 4, 5, 6) | is.na(e6a) ~ "Básica o menos",
# Educación básica completa y media (completa o incompleta)
e6a %in% c(7, 8, 9, 10) ~ "Media",
# Educación técnica (en cualquier nivel)
e6a %in% c(11, 12) ~ "Técnica",
# Educación universitaria o superior (incluye postgrados)
e6a %in% c(13, 14, 15) ~ "Universitaria",
# Por si hay algún caso no considerado
TRUE ~ "No especificado"
))
# Creamos una clasificación simplificada de nivel educacional
casen_2021 <- casen_2021 %>%
mutate(nivel_educacional = case_when(
# Sin educación formal o básica incompleta
e6a %in% c(1, 2, 3, 4, 5, 6) | is.na(e6a) ~ "Básica o menos",
# Educación básica completa y media (completa o incompleta)
e6a %in% c(7, 8, 9, 10) ~ "Media",
# Educación técnica (en cualquier nivel)
e6a %in% c(11, 12) ~ "Técnica",
# Educación universitaria o superior (incluye postgrados)
e6a %in% c(13, 14, 15) ~ "Universitaria",
# Por si hay algún caso no considerado
TRUE ~ "No especificado"
))
# Creamos una visualización que muestra la distribución por comuna
educacion_comuna <- casen_2021 %>%
# Agrupamos por comuna y nivel educacional para contar
group_by(comuna, nivel_educacional) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
# Calculamos el porcentaje dentro de cada comuna
group_by(comuna) %>%
mutate(porcentaje = (cantidad / sum(cantidad)) * 100) %>%
ungroup()
# Creamos un gráfico de barras apiladas por comuna
grafico_educacion <- ggplot(educacion_comuna,
aes(x = reorder(comuna, porcentaje),
y = porcentaje,
fill = nivel_educacional)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_brewer(palette = "Set2") +  # Usamos una paleta de colores agradable
labs(
title = "Nivel Educacional por Comuna",
subtitle = "Región Metropolitana - 2021",
x = "Comuna",
y = "Porcentaje",
fill = "Nivel Educacional"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 8),
legend.position = "bottom"
)
# Mostramos el gráfico
grafico_educacion
# Creamos un resumen general de la distribución
resumen_educacional <- casen_2021 %>%
group_by(nivel_educacional) %>%
summarise(
cantidad = n(),
porcentaje = round((cantidad / nrow(casen_2021)) * 100, 1)
) %>%
arrange(desc(porcentaje))
# Mostramos el resumen
print(resumen_educacional)
perfil_educacional_comunal <- casen_2021 %>%
group_by(comuna, nivel_educacional) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(comuna) %>%
mutate(
porcentaje_educacion = (cantidad / sum(cantidad)) * 100,
total_comuna = sum(cantidad)
) %>%
ungroup()
# Ahora preparamos los datos de participación electoral
# Usaremos la primera vuelta como ejemplo, pero podríamos hacer lo mismo con la segunda
datos_participacion <- eleccion_2021_primeravuelta %>%
select(comuna, Participacion_Porcentaje) %>%
mutate(comuna = str_to_lower(comuna))  # Convertimos a minúsculas para hacer match con CASEN
# Ahora unimos ambos conjuntos de datos
analisis_educacion_participacion <- perfil_educacional_comunal %>%
mutate(comuna = str_to_lower(comuna)) %>%  # Convertimos a minúsculas para hacer match
left_join(datos_participacion, by = c("comuna" = "comuna"))
# Creamos una visualización que muestre la relación entre nivel educacional y participación
ggplot(analisis_educacion_participacion,
aes(x = porcentaje_educacion,
y = Participacion_Porcentaje,
color = nivel_educacional)) +
geom_point(size = 3, alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~nivel_educacional) +
labs(
title = "Relación entre Nivel Educacional y Participación Electoral por Comuna",
subtitle = "Región Metropolitana - Primera Vuelta 2021",
x = "Porcentaje de población con nivel educacional",
y = "Porcentaje de participación electoral",
color = "Nivel Educacional"
) +
theme_minimal() +
theme(legend.position = "bottom")
# También podemos calcular la correlación entre educación universitaria y participación
correlacion_universitaria <- analisis_educacion_participacion %>%
filter(nivel_educacional == "Universitaria") %>%
summarise(
correlacion = cor(porcentaje_educacion, Participacion_Porcentaje,
use = "complete.obs")
)
correlacion_universitaria <- analisis_educacion_participacion %>%
filter(nivel_educacional == "Universitaria") %>%
summarise(
correlacion = cor(porcentaje_educacion, Participacion_Porcentaje,
use = "complete.obs")
)
analisis_educacion_participacion <- analisis_educacion_participacion %>%
mutate(
porcentaje_educacion = as.numeric(porcentaje_educacion),
Participacion_Porcentaje = as.numeric(Participacion_Porcentaje)
)
correlacion_universitaria <- analisis_educacion_participacion %>%
filter(nivel_educacional == "Universitaria") %>%
ungroup() %>%  # Deshacer cualquier agrupamiento previo
filter(!is.na(porcentaje_educacion) & !is.na(Participacion_Porcentaje)) %>%
summarise(
correlacion = cor(porcentaje_educacion, Participacion_Porcentaje, use = "complete.obs")
)
resumen_participacion <- analisis_educacion_participacion %>%
group_by(comuna) %>%
mutate(nivel_predominante = nivel_educacional[which.max(porcentaje_educacion)]) %>%
group_by(nivel_predominante) %>%
summarise(
participacion_promedio = mean(Participacion_Porcentaje, na.rm = TRUE),
n_comunas = n_distinct(comuna)
) %>%
arrange(desc(participacion_promedio))
# Mostramos los resultados
print("Correlación entre educación universitaria y participación:")
print(correlacion_universitaria)
print("\nResumen de participación por nivel educacional predominante:")
print(resumen_participacion)
perfil_educacional_comunal <- casen_2021 %>%
group_by(comuna, nivel_educacional) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(comuna) %>%
mutate(
porcentaje_educacion = (cantidad / sum(cantidad)) * 100,
total_comuna = sum(cantidad)
) %>%
ungroup()
# Ahora preparamos los datos de participación electoral
# Usaremos la primera vuelta como ejemplo, pero podríamos hacer lo mismo con la segunda
datos_participacion <- eleccion_2021_primeravuelta %>%
select(comuna, Participacion_Porcentaje) %>%
mutate(comuna = str_to_lower(comuna))  # Convertimos a minúsculas para hacer match con CASEN
# Ahora unimos ambos conjuntos de datos
analisis_educacion_participacion <- perfil_educacional_comunal %>%
mutate(comuna = str_to_lower(comuna)) %>%  # Convertimos a minúsculas para hacer match
left_join(datos_participacion, by = c("comuna" = "comuna"))
# Creamos una visualización que muestre la relación entre nivel educacional y participación
ggplot(analisis_educacion_participacion,
aes(x = porcentaje_educacion,
y = Participacion_Porcentaje,
color = nivel_educacional)) +
geom_point(size = 3, alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~nivel_educacional) +
labs(
title = "Relación entre Nivel Educacional y Participación Electoral por Comuna",
subtitle = "Región Metropolitana - Primera Vuelta 2021",
x = "Porcentaje de población con nivel educacional",
y = "Porcentaje de participación electoral",
color = "Nivel Educacional"
) +
theme_minimal() +
theme(legend.position = "bottom")
# También podemos calcular la correlación entre educación universitaria y participación
analisis_educacion_participacion <- analisis_educacion_participacion %>%
mutate(
porcentaje_educacion = as.numeric(porcentaje_educacion),
Participacion_Porcentaje = as.numeric(Participacion_Porcentaje)
)
correlacion_universitaria <- analisis_educacion_participacion %>%
filter(nivel_educacional == "Universitaria") %>%
ungroup() %>%  # Deshacer cualquier agrupamiento previo
filter(!is.na(porcentaje_educacion) & !is.na(Participacion_Porcentaje)) %>%
summarise(
correlacion = cor(porcentaje_educacion, Participacion_Porcentaje, use = "complete.obs")
)
# Y crear una tabla resumen que muestre los promedios de participación
# según el nivel predominante de educación en cada comuna
resumen_participacion <- analisis_educacion_participacion %>%
group_by(comuna) %>%
mutate(nivel_predominante = nivel_educacional[which.max(porcentaje_educacion)]) %>%
group_by(nivel_predominante) %>%
summarise(
participacion_promedio = mean(Participacion_Porcentaje, na.rm = TRUE),
n_comunas = n_distinct(comuna)
) %>%
arrange(desc(participacion_promedio))
# Mostramos los resultados
print("Correlación entre educación universitaria y participación:")
print(correlacion_universitaria)
print("\nResumen de participación por nivel educacional predominante:")
print(resumen_participacion)
